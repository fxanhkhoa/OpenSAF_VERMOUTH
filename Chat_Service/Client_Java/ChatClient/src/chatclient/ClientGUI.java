/*
 
*Function : ClientGUI
*Description: Client Interfaces. Chat General or Select User to Private Chat
*Argument: Nope!
*Return: Nope!
Note: First Interface 

 */
package chatclient;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.GridLayout;

import java.awt.event.ActionEvent;

import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;

import javax.swing.JButton;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;

import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;

/**
 *
 * @author hieupham
 */

public class ClientGUI extends javax.swing.JFrame {

    /**
     * Creates new form ClientGUI
     */
    /*CORE*/
    Client _Client;
    
    /**/
    Global g;
    Thread waitThr;
    //Thread MessThr;
    private int sName;
    private String sNewUser, sNewFriend;
    private DefaultListModel listModel,listModelUserPrv;
    RoomGUI roomNew;
    DataControl dataControl;
    private SavedPreference sP;
    // multi input
    private JFrame frame;
    private JPanel pane;
    private JTextField nameROOMField,nameUserField;
    private JPasswordField passROOMField,passCURField,passNEWField;
    private String nameROOM="";
    private String passROOM="";
    //
    
    public ClientGUI() {
        initComponents();
        /**/
         _Client = Client.getInstance();
         //_Client.InitVar();
        /**/
        setVisible(true);
        btnReconnect.setEnabled(false);
        sP = SavedPreference.getInstance();
        g = Global.getInstance();
        dataControl = new DataControl();
        listRoom.setModel(new DefaultListModel());
        listModel = new DefaultListModel();
        listUserPrv.setModel(new DefaultListModel());
        listModelUserPrv = new DefaultListModel();
 
        //User cannot change
        txtContent.setEditable(false);
        txtContent.setCaretPosition(0);
        /**/
        lbStatus.setOpaque(true);
        lbStatus.setBackground(Color.GRAY);
        /**/
//        ReloadOnline(0);

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtChat = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnCreateRoom = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listRoom = new javax.swing.JList<>();
        addUser = new javax.swing.JButton();
        scrollListFriend = new javax.swing.JScrollPane();
        listUserPrv = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();
        lbUser = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        lbWelcome = new javax.swing.JLabel();
        btnReconnect = new javax.swing.JButton();
        lbStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        FailServerByID = new javax.swing.JMenuItem();
        jMenuAccount = new javax.swing.JMenu();
        jMenuItemSignOut = new javax.swing.JMenuItem();
        jMenuItemChangePass = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 624));
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 200));

        jLabel1.setText("Room Avaiable");

        txtChat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtChatKeyPressed(evt);
            }
        });

        jLabel2.setText("My  Friends");

        btnCreateRoom.setText("CreateRoom");
        btnCreateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateRoomActionPerformed(evt);
            }
        });

        listRoom.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listRoomMouseClicked(evt);
            }
        });
        listRoom.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listRoomValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listRoom);

        addUser.setText("ADD FRIEND");
        addUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserActionPerformed(evt);
            }
        });

        listUserPrv.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listUserPrv.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listUserPrvValueChanged(evt);
            }
        });
        scrollListFriend.setViewportView(listUserPrv);

        txtContent.setColumns(20);
        txtContent.setRows(5);
        jScrollPane3.setViewportView(txtContent);

        lbUser.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        lbWelcome.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        lbWelcome.setText("WELCOME");

        btnReconnect.setText("Reconnect");
        btnReconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReconnectActionPerformed(evt);
            }
        });

        lbStatus.setText("OFFLINE");

        jMenuFile.setText("File");

        jExit.setText("Quit");
        jExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jExit);

        jMenuBar1.add(jMenuFile);

        jMenu2.setText("Edit");

        FailServerByID.setText("Fail");
        FailServerByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FailServerByIDActionPerformed(evt);
            }
        });
        jMenu2.add(FailServerByID);

        jMenuBar1.add(jMenu2);

        jMenuAccount.setText("Account");

        jMenuItemSignOut.setText("Sign Out");
        jMenuItemSignOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSignOutActionPerformed(evt);
            }
        });
        jMenuAccount.add(jMenuItemSignOut);

        jMenuItemChangePass.setText("Change Password");
        jMenuItemChangePass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemChangePassActionPerformed(evt);
            }
        });
        jMenuAccount.add(jMenuItemChangePass);

        jMenuBar1.add(jMenuAccount);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(addUser))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(btnRefresh)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtChat, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(scrollListFriend, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnCreateRoom)))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnReconnect)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbWelcome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbStatus)
                                .addGap(45, 45, 45))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(lbWelcome)
                                .addComponent(btnReconnect))
                            .addComponent(lbUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbStatus)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(btnCreateRoom)
                                .addGap(77, 77, 77)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(btnRefresh))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollListFriend))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtChat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addUser))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void PerformRefreshClick(){
        btnRefresh.doClick();
    }
    
    public void SetLabelName(String usr){
        lbUser.setText(usr);
    }
    
    public void showReconBtn(){
        btnReconnect.setEnabled(true);
        lbStatus.setOpaque(true);
        lbStatus.setText("OFFLINE");
        lbStatus.setBackground(Color.GRAY);
    }

    public void disableReconBtn(){
        btnReconnect.setEnabled(false);
    }
    
    public void Reload(int size){
        ReloadOnline(size);
    }
    
    public void ReloadRoom(){
        ReloadRoomList();
    }
    public void StatusOnline(){
        lbStatus.setOpaque(true);
        lbStatus.setText("ONLINE");
        lbStatus.setBackground(Color.GREEN);
    }
    private void ReloadRoomList(){
        listModel.removeAllElements();
        sP = SavedPreference.getInstance();
        int size = sP.numberOfRoom;
        System.out.println("Size of Room :" + sP.roomList.size());
        for (RoomStruct rS : sP.roomList){
            listModel.addElement(rS.roomName);
        }
        
        if (true){
            listRoom.setModel(listModel);
        }
    }
    
    private void ReloadOnline(int size){
        listModelUserPrv.removeAllElements();
        sP = SavedPreference.getInstance();
        System.out.println("Cap :" + size);
        for (UserStruct uS: sP.friendList){
            try {
                System.out.println("i day:" + uS.userName);
                if (!uS.userName.equals(sP.GetUserName())){
                //System.err.println(sP.onlineUser.elementAt(k).userName);
                listModelUserPrv.addElement(uS);
                }
            } catch (Exception e) {
            }
             
        }
            if(true)
            {
                listUserPrv.setModel(listModelUserPrv);
            }
                            
        //Now render Jlist
        listUserPrv.setCellRenderer(new OnlineUserRenderer());
    }
    
    public void AddTextToBox(char[] curUser,char[] desUser,char[] Message){
        sP = SavedPreference.getInstance();
        String des = String.valueOf(desUser).trim();
        String mess = String.valueOf(Message).trim();
        String cur = String.valueOf(curUser).trim();

        if (des.equals(sP.GetUserName())){

            txtContent.append(cur + ": " + mess +  "\n");

            // Add to local databases
            //System.out.println(g.client.GetName());
            dataControl.curUsr = des;
            dataControl.desUsr = sP.GetUserName();
            dataControl.numberOfElement = dataControl.CountXMLElement(des);
            //System.out.println(String.valueOf(g.client.GetName()));
            dataControl.Message = mess;
            dataControl.AppendXMLFile(des);
            //g.client.ClearData();
        }
    }
    
    private void txtChatKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtChatKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            if (!listUserPrv.isSelectionEmpty()){
                txtContent.append(txtChat.getText() + "\n");
                _Client.SendPrivateMessage(String.valueOf(listUserPrv.getSelectedValue()), txtChat.getText());
                // Add to local databases
                dataControl.curUsr = sP.GetUserName();
                dataControl.desUsr = String.valueOf(listUserPrv.getSelectedValue());
                dataControl.numberOfElement = dataControl.CountXMLElement(String.valueOf(listUserPrv.getSelectedValue()));
                dataControl.Message = txtChat.getText().trim();
                dataControl.AppendXMLFile(String.valueOf(listUserPrv.getSelectedValue()));
                txtChat.setText("");
            }
            else{
                int mcServer = JOptionPane.ERROR_MESSAGE;
                JOptionPane.showMessageDialog (null, "Select 1 user man!!!!", "Warning", mcServer);
            }
        }
    }//GEN-LAST:event_txtChatKeyPressed
    private void btnCreateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateRoomActionPerformed
        // TODO add your handling code here:
         /*GET MULTI INPUT */
        pane = new JPanel();
        pane.setLayout(new GridLayout(0, 2, 2, 2));

        nameROOMField = new JTextField(29);
        passROOMField = new JPasswordField(29);

        pane.add(new JLabel("What is your room's name?"));
        pane.add(nameROOMField);

        pane.add(new JLabel("Set Password"));
        pane.add(passROOMField);

        int option = JOptionPane.showConfirmDialog(frame, pane, "Please fill all the fields", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (option == JOptionPane.OK_OPTION) {

            String nameROOM = nameROOMField.getText();
            String passROOM = passROOMField.getText();
            _Client.AddNewRoom(nameROOM,passROOM);
        }
        

    }//GEN-LAST:event_btnCreateRoomActionPerformed

    
    private void addUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserActionPerformed
        // TODO add your handling code here:
        pane = new JPanel();
        pane.setLayout(new GridLayout(0, 2, 2, 2));
        nameUserField = new JTextField(29);
        pane.add(new JLabel("Type Friend's ID want to add"));
        pane.add(nameUserField);
	int iNewFriend = JOptionPane.showConfirmDialog(frame, pane, "Please FILL your friend's name", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if(iNewFriend==JOptionPane.OK_OPTION){
            String nameFriend = nameUserField.getText();
            System.err.println("Your friend's name : "+nameFriend);
            _Client.AddFriend(nameFriend);
        }
        else{
            System.err.println("Cancel this action ADD FRIEND");
        }
    }//GEN-LAST:event_addUserActionPerformed

    private void listRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listRoomMouseClicked
        // TODO add your handling code here:
        sP = SavedPreference.getInstance();
        int statusNEWROOM=1005;
        
        if (evt.getClickCount() % 2==0){
            String nameRoom =String.valueOf(listRoom.getSelectedValue());
            int roomID = sP.GetIDROOM(nameRoom);
            System.out.println("ROOM ID WHEN CLICKED LIST:" +roomID);
            if (sP.CheckOwnerRoomGUI(roomID) == 0){
//                int mc = JOptionPane.INFORMATION_MESSAGE;
//                String sPassRoom = JOptionPane.showInputDialog (null, "Type Room Pass's want to join ROOM", "Request Pass", mc);               
//                _Client.LetMeBeInRoom(roomID, sPassRoom);
                
                
                    pane = new JPanel();
                    pane.setLayout(new GridLayout(0, 2, 2, 2));
                    passROOMField = new JPasswordField(29);
                    pane.add(new JLabel("Enter Room's Password"));
                    pane.add(passROOMField);
                    int option = JOptionPane.showConfirmDialog(frame, pane, "Please fill all the fields", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    if (option == JOptionPane.OK_OPTION) {

                        
                        String sPassROOM = passROOMField.getText();
                        _Client.LetMeBeInRoom(roomID, sPassROOM);
                    }
                    else{
                        System.err.println("Cancel  action LET ME BEING ROOM");
                    }
                
                
            }
            else{
                //sP.InitRoomGUI(nameRoom,roomID); //Da init luc tao room r nen ko init lai
                statusNEWROOM = sP.GetstatusROOM(roomID);
                try {
                    Thread.sleep(200);
                } catch (InterruptedException ex) {
                }
                if(statusNEWROOM==0){

                    try {
                        // Yeu cau server gui LIST USER TRONG ROOM CREATE VE
                        //_Client.RefreshRoom(roomID);// CMD 15
                    } catch (Exception e) {
                    }
                    sP.OpenRoomGUI(roomID);
                    
                    
                    
                }
                System.out.println("CHECK ROOM AVAILABLE : "+statusNEWROOM);
            }
            
            //System.err.println(String.valueOf(listRoom.getSelectedValue()));
            
            

        }
    }//GEN-LAST:event_listRoomMouseClicked

    private void listUserPrvValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listUserPrvValueChanged
        // TODO add your handling code here:
        int flag = 1;
        txtContent.setText("");
        sP = SavedPreference.getInstance();
        boolean adjust = evt.getValueIsAdjusting();
        if (!adjust){
            try {
                JList changedList = (JList)evt.getSource();
                if (listUserPrv == changedList){
                    System.out.println("gogogo");
                    //txtContent.setText("");
                    System.err.println(String.valueOf(listUserPrv.getSelectedValue()));
                    Map<String, MessageStruct> dataMap = new HashMap<String, MessageStruct>();
                    dataMap = dataControl.GetList(String.valueOf(listUserPrv.getSelectedValue()));
                    //for (int i = 0; i < dataMap.size(); i++){
                    for (String key: dataMap.keySet()){
                        MessageStruct ms = new MessageStruct();
                        ms = dataMap.get(key);
                        //System.out.println(sP.GetUserName());
                        //System.out.println(ms.desUsr + "z");
                        if (ms.desUsr.contains(sP.GetUserName())){
                            txtContent.append(ms.curUsr + ": " + ms.Message + "\n");
                        }
                        else {
                            txtContent.append(ms.Message + "\n");
                        }
                    }
                }
                flag = 1;
            } catch (Exception e) {
                flag = 0;
            }
            
        if (flag == 0){
        try {
            if (dataControl.CheckExistXMLFile(String.valueOf(listUserPrv.getSelectedValue())) == 0){
            dataControl.curUsr = sP.GetUserName();
            dataControl.desUsr = String.valueOf(listUserPrv.getSelectedValue());
            dataControl.numberOfElement = 0;
            dataControl.Message = "1st created";
            dataControl.CreateXMLFile(String.valueOf(listUserPrv.getSelectedValue()));
            }
        } catch (Exception e) {
        }
            
            
        }
        }
        
    }//GEN-LAST:event_listUserPrvValueChanged

    private void jMenuItemSignOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSignOutActionPerformed
        // TODO add your handling code here:

        try {
            _Client.SignOut();
            _Client.GetCommandCode();
            //this.dispose();
        } catch (InterruptedException ex) {}
         
    }//GEN-LAST:event_jMenuItemSignOutActionPerformed

    private void jMenuItemChangePassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemChangePassActionPerformed
        // TODO add your handling code here:
        {
             /*GET MULTI INPUT */
            pane = new JPanel();
            pane.setLayout(new GridLayout(0, 2, 2, 2));
            passCURField = new JPasswordField(29);
            passNEWField = new JPasswordField(29);
            pane.add(new JLabel("Fill current Password"));
            pane.add(passCURField);
            pane.add(new JLabel("Set NEW Password"));
            pane.add(passNEWField);

            int option = JOptionPane.showConfirmDialog(frame, pane, "Please FILL ALL", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (option == JOptionPane.OK_OPTION) {


                String passCUR = passCURField.getText();
                String passNEW = passNEWField.getText();
                if(passCUR.equals(sP.GetPassword())){
                    _Client.RePass(passNEW);
                }
                else{
                    int mcServer = JOptionPane.ERROR_MESSAGE;
                    JOptionPane.showMessageDialog (null, "PASSWORD NOT TRUE", "ERROR", mcServer);
                    System.err.println("NOT ACCESS ");
                }
            }
            else{
                    System.err.println("Cancel action CHANGE PASSWORD");
            }
        }
    }//GEN-LAST:event_jMenuItemChangePassActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        _Client.ReFresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void jExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jExitActionPerformed

    private void btnReconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReconnectActionPerformed
        try {
            btnReconnect.setEnabled(false);
            Thread.sleep(3000);
            _Client.Recon();
        } catch (InterruptedException ex) {        }
    }//GEN-LAST:event_btnReconnectActionPerformed

    private void listRoomValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listRoomValueChanged
        // TODO add your handling code here:
        try {
            //nothing here
        } catch (Exception e) {
        }
   
    }//GEN-LAST:event_listRoomValueChanged

    private void FailServerByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FailServerByIDActionPerformed
        // TODO add your handling code here:
        _Client.SendMsgToRoom(22145, "Fail");
    }//GEN-LAST:event_FailServerByIDActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem FailServerByID;
    private javax.swing.JButton addUser;
    private javax.swing.JButton btnCreateRoom;
    private javax.swing.JButton btnReconnect;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JMenuItem jExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenuAccount;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemChangePass;
    private javax.swing.JMenuItem jMenuItemSignOut;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JLabel lbUser;
    private javax.swing.JLabel lbWelcome;
    private javax.swing.JList<String> listRoom;
    private javax.swing.JList<String> listUserPrv;
    private javax.swing.JScrollPane scrollListFriend;
    private javax.swing.JTextField txtChat;
    private javax.swing.JTextArea txtContent;
    // End of variables declaration//GEN-END:variables
}
